console.log("Spotify AI Generator Playlist Extender");

// Check if we're returning from Spotify auth
console.log('üîç Current URL:', window.location.href);
console.log('üîç Auth in progress:', sessionStorage.getItem('authInProgress'));

if (sessionStorage.getItem('authInProgress') === 'true') {
  console.log('üîÑ Returning from Spotify auth, checking for auth completion...');
  
  // Check if we have auth parameters in the URL
  const urlParams = new URLSearchParams(window.location.search);
  const code = urlParams.get('code');
  const error = urlParams.get('error');
  
  console.log('üîç URL params - code:', code, 'error:', error);
  
  if (code) {
    console.log('‚úÖ Auth code received:', code);
    handleAuthCallback(code);
  } else if (error) {
    console.log('‚ùå Auth error:', error);
    sessionStorage.removeItem('authInProgress');
    sessionStorage.removeItem('pendingPlaylistData');
    alert('Authentication failed: ' + error);
  } else {
    console.log('‚ö†Ô∏è No auth parameters found, clearing session storage');
    sessionStorage.removeItem('authInProgress');
    sessionStorage.removeItem('pendingPlaylistData');
  }
}

// Function to handle auth callback
async function handleAuthCallback(code) {
  try {
    console.log('üîÑ Exchanging code for token...');
    const tokenResponse = await fetch('https://gemini.niperiusland.fr:4005/spotify-token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ code })
    });
    
    if (!tokenResponse.ok) {
      throw new Error('Token exchange failed');
    }
    
    const { accessToken } = await tokenResponse.json();
    console.log('‚úÖ Access token received');
    
    // Get the pending playlist data
    const pendingPlaylistData = JSON.parse(sessionStorage.getItem('pendingPlaylistData'));
    if (!pendingPlaylistData) {
      throw new Error('No pending playlist data found');
    }
    
    console.log('üéµ Creating playlist with stored data...');
    await createSpotifyPlaylist(accessToken, pendingPlaylistData);
    
    // Clean up
    sessionStorage.removeItem('authInProgress');
    sessionStorage.removeItem('pendingPlaylistData');
    
  } catch (error) {
    console.error('‚ùå Auth callback error:', error);
    sessionStorage.removeItem('authInProgress');
    sessionStorage.removeItem('pendingPlaylistData');
    alert('Authentication failed: ' + error.message);
  }
}

// Listen for messages from auth window (fallback)
window.addEventListener('message', async (event) => {
  console.log('üì® Message received:', event.data);
  
  if (event.data && event.data.type === 'SPOTIFY_AUTH_SUCCESS') {
    console.log('‚úÖ Auth success message received');
    const { accessToken, playlistData } = event.data;
    await createSpotifyPlaylist(accessToken, playlistData);
  }
});

// Function to exchange code for token
async function exchangeCodeForToken(code, playlistData) {
  try {
    console.log('üîÑ Exchanging code for token...');
    const tokenResponse = await fetch('https://gemini.niperiusland.fr:4005/spotify-token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ code })
    });
    
    if (!tokenResponse.ok) {
      throw new Error('Token exchange failed');
    }
    
    const { accessToken, refreshToken } = await tokenResponse.json();
    console.log('‚úÖ Access token received');
    
    // Store auth data for the popup close handler
    sessionStorage.setItem('spotifyAuthData', JSON.stringify({ accessToken, refreshToken, playlistData }));
    
    // Also create the playlist immediately
    await createSpotifyPlaylist(accessToken, playlistData, refreshToken);
    
  } catch (error) {
    console.error('‚ùå Token exchange error:', error);
    sessionStorage.removeItem('authInProgress');
    sessionStorage.removeItem('pendingPlaylistData');
    alert('Authentication failed: ' + error.message);
  }
}

// Function to create Spotify playlist with token refresh handling
async function createSpotifyPlaylist(accessToken, playlistData, refreshToken = null) {
  try {
    console.log('üéµ Creating Spotify playlist...');
    
    // Format data for Spotify
    const spotifyPlaylistData = {
      name: playlistData.playlist.name || 'AI Generated Playlist',
      description: playlistData.playlist.description || 'Generated by AI',
      songs: (playlistData.playlist.songs || []).map(song => ({
        title: song.title,
        artist: song.artist
      }))
    };
    
    console.log('üéµ Sending to Spotify creation:', spotifyPlaylistData);
    
    let createResponse = await fetch('https://gemini.niperiusland.fr:4005/create-spotify-playlist', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        accessToken, 
        playlistData: spotifyPlaylistData 
      })
    });
    
    // If token expired, try to refresh it
    if (!createResponse.ok && refreshToken) {
      const errorText = await createResponse.text();
      console.log('üîÑ Token may be expired, attempting refresh...', errorText);
      
      try {
        const refreshResponse = await fetch('https://gemini.niperiusland.fr:4005/refresh-spotify-token', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ refreshToken })
        });
        
        if (refreshResponse.ok) {
          const { accessToken: newAccessToken } = await refreshResponse.json();
          console.log('‚úÖ Token refreshed successfully');
          
          // Retry with new token
          createResponse = await fetch('https://gemini.niperiusland.fr:4005/create-spotify-playlist', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              accessToken: newAccessToken, 
              playlistData: spotifyPlaylistData 
            })
          });
        }
      } catch (refreshError) {
        console.error('‚ùå Token refresh failed:', refreshError);
      }
    }
    
    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      throw new Error(`Spotify creation failed: ${createResponse.status} - ${errorText}`);
    }
    
    const result = await createResponse.json();
    console.log('‚úÖ Playlist created successfully:', result);
    
    // Show success notification
    const notification = document.createElement('div');
    notification.className = 'success-notification';
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #1db954, #1ed760);
      color: white;
      padding: 20px;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(29, 185, 84, 0.3);
      z-index: 10002;
      max-width: 400px;
    `;
    
    notification.innerHTML = `
      <div style="display: flex; align-items: center; margin-bottom: 10px;">
        <div style="font-size: 24px; margin-right: 10px;">üéµ</div>
        <div style="font-weight: bold; font-size: 18px;">Playlist cr√©√©e !</div>
      </div>
      <div style="margin-bottom: 10px;">
        <strong>${result.tracksAdded}/${result.totalTracks}</strong> chansons ajout√©es
      </div>
      <div style="margin-bottom: 15px;">
        <a href="${result.playlistUrl}" target="_blank" style="color: white; text-decoration: underline;">
          Ouvrir dans Spotify ‚Üí
        </a>
      </div>
      <button onclick="this.parentElement.remove()" style="
        background: rgba(255,255,255,0.2);
        border: none;
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        cursor: pointer;
        font-size: 14px;
      ">Fermer</button>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-close after 5 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
    
    // Close the results modal after successful creation
    setTimeout(() => {
      const resultsModal = document.getElementById('playlist-results-modal');
      if (resultsModal && resultsModal.parentNode) {
        resultsModal.parentNode.removeChild(resultsModal);
      }
    }, 2000); // Close after 2 seconds to let user see the success notification
    
  } catch (error) {
    console.error('‚ùå Playlist creation error:', error);
    alert('Erreur lors de la cr√©ation de la playlist: ' + error.message);
  }
}

// Wait for the page to load
function waitForElement(selector, timeout = 10000) {
  return new Promise((resolve, reject) => {
    const element = document.querySelector(selector);
    if (element) {
      resolve(element);
      return;
    }

    const observer = new MutationObserver((mutations, obs) => {
      const element = document.querySelector(selector);
      if (element) {
        obs.disconnect();
        resolve(element);
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    setTimeout(() => {
      observer.disconnect();
      reject(new Error(`Element ${selector} not found within ${timeout}ms`));
    }, timeout);
  });
}

// Create and inject the AI Playlist button
async function addAIPlaylistButton() {
  try {
    // Wait for the "Cr√©er" button to be available
    const createButton = await waitForElement('button[aria-label="Cr√©er"]');
    
    // Find the parent container that holds the buttons
    const buttonContainer = createButton.parentElement;
    
    // Create the AI Playlist button
    const aiPlaylistButton = document.createElement('button');
    aiPlaylistButton.type = 'button';
    aiPlaylistButton.className = 'UCyimCp8rEfL5nB8paBu LLlfyKiKbOd8gfCmHcZX HgSl1rNhQllYYZneaYji LNzflW6HN3b7upl8Pt7w G_xEAccmp3ulqXjuviWK Lau6kc9Au_87a19N7MRq v7brahHJw__K_QX72Un8';
    aiPlaylistButton.setAttribute('aria-label', 'AI Playlist');
    aiPlaylistButton.style.marginLeft = '8px';
    
    // Add the plus icon (same as Cr√©er button)
    const iconSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    iconSvg.setAttribute('data-encore-id', 'icon');
    iconSvg.setAttribute('role', 'img');
    iconSvg.setAttribute('aria-hidden', 'true');
    iconSvg.setAttribute('class', 'e-91000-icon e-91000-baseline yoyv1_1LPucwCXYDe5AN');
    iconSvg.setAttribute('viewBox', '0 0 16 16');
    iconSvg.style.cssText = '--encore-icon-height: var(--encore-graphic-size-decorative-smaller); --encore-icon-width: var(--encore-graphic-size-decorative-smaller);';
    
    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttribute('d', 'M15.25 8a.75.75 0 0 1-.75.75H8.75v5.75a.75.75 0 0 1-1.5 0V8.75H1.5a.75.75 0 0 1 0-1.5h5.75V1.5a.75.75 0 0 1 1.5 0v5.75h5.75a.75.75 0 0 1 .75.75');
    iconSvg.appendChild(path);
    
    // Add the text span
    const textSpan = document.createElement('span');
    textSpan.className = 'e-91000-text encore-text-body-small-bold encore-internal-color-text-base';
    textSpan.setAttribute('data-encore-id', 'tet');
    textSpan.textContent = 'AI Playlist';
    
    // Add click handler
    aiPlaylistButton.addEventListener('click', () => {
      console.log('AI Playlist button clicked!');
      showMusicGenreModal();
    });
    
    // Assemble the button
    aiPlaylistButton.appendChild(iconSvg);
    aiPlaylistButton.appendChild(textSpan);
    
    // Insert the button after the Cr√©er button
    buttonContainer.insertBefore(aiPlaylistButton, createButton.nextSibling);
    
    console.log('AI Playlist button added successfully!');
  } catch (error) {
    console.error('Failed to add AI Playlist button:', error);
  }
}

// Music families and their subgenres
const musicFamilies = {
  'Rock': {
    icon: 'üé∏',
    color: '#ff6b6b',
    subgenres: [
      'Classic Rock', 'Alternative Rock', 'Indie Rock', 'Punk Rock', 
      'Grunge', 'Progressive Rock', 'Psychedelic Rock', 'Hard Rock',
      'Soft Rock', 'Folk Rock', 'Blues Rock', 'Glam Rock'
    ]
  },
  'Electronic': {
    icon: 'üéπ',
    color: '#45b7d1',
    subgenres: [
      'House', 'Techno', 'Trance', 'Dubstep', 'Drum & Bass',
      'Ambient', 'IDM', 'Synthwave', 'Future Bass', 'Breakbeat',
      'Electro', 'Minimal', 'Progressive House', 'Deep House'
    ]
  },
  'Jazz': {
    icon: 'üé∫',
    color: '#96ceb4',
    subgenres: [
      'Bebop', 'Swing', 'Fusion', 'Smooth Jazz', 'Free Jazz',
      'Hard Bop', 'Cool Jazz', 'Latin Jazz', 'Acid Jazz', 'Jazz Funk',
      'Modal Jazz', 'Post-Bop', 'Avant-Garde Jazz', 'Jazz Rock'
    ]
  },
  'Hip-Hop': {
    icon: 'üé§',
    color: '#feca57',
    subgenres: [
      'Old School', 'Gangsta Rap', 'Conscious Rap', 'Trap',
      'Drill', 'Cloud Rap', 'Alternative Hip-Hop', 'Jazz Rap',
      'Boom Bap', 'Mumble Rap', 'East Coast', 'West Coast',
      'Southern Hip-Hop', 'UK Drill'
    ]
  },
  'Classical': {
    icon: 'üéª',
    color: '#4ecdc4',
    subgenres: [
      'Baroque', 'Romantic', 'Modern Classical', 'Neoclassical',
      'Chamber Music', 'Symphony', 'Opera', 'Choral',
      'Minimalist', 'Contemporary Classical', 'Avant-Garde',
      'Impressionist', 'Expressionist', 'Serialism'
    ]
  },
  'Pop': {
    icon: 'üéµ',
    color: '#ff9ff3',
    subgenres: [
      'Pop Rock', 'Synthpop', 'Indie Pop', 'Electropop',
      'K-Pop', 'J-Pop', 'Latin Pop', 'Bubblegum Pop',
      'Teen Pop', 'Power Pop', 'Art Pop', 'Dream Pop',
      'Chamber Pop', 'Baroque Pop'
    ]
  },
  'Blues': {
    icon: 'üé∑',
    color: '#8e44ad',
    subgenres: [
      'Delta Blues', 'Chicago Blues', 'Electric Blues', 'Acoustic Blues',
      'Blues Rock', 'Rhythm & Blues', 'Soul Blues', 'Country Blues',
      'Piedmont Blues', 'Texas Blues', 'Memphis Blues', 'West Coast Blues',
      'British Blues', 'Blues Revival'
    ]
  },
  'Country': {
    icon: 'ü™ï',
    color: '#27ae60',
    subgenres: [
      'Honky Tonk', 'Bluegrass', 'Country Rock', 'Outlaw Country',
      'Nashville Sound', 'Bakersfield Sound', 'Country Pop', 'Alt-Country',
      'Progressive Country', 'Country Folk', 'Western', 'Red Dirt',
      'Country Rap', 'Bro-Country'
    ]
  },
  'R&B': {
    icon: 'üéº',
    color: '#e74c3c',
    subgenres: [
      'Soul', 'Motown', 'Funk', 'Neo-Soul', 'Contemporary R&B',
      'Quiet Storm', 'New Jack Swing', 'Hip-Hop Soul', 'Alternative R&B',
      'PBR&B', 'Trap Soul', 'Gospel', 'Urban Contemporary'
    ]
  },
  'Folk': {
    icon: 'ü™ó',
    color: '#e67e22',
    subgenres: [
      'Traditional Folk', 'Folk Rock', 'Indie Folk', 'Celtic Folk',
      'American Folk', 'British Folk', 'Protest Folk', 'Folk Punk',
      'Neo-Folk', 'Freak Folk', 'Anti-Folk', 'Psychedelic Folk',
      'World Folk', 'Folk Metal'
    ]
  },
  'Reggae': {
    icon: 'ü•Å',
    color: '#f39c12',
    subgenres: [
      'Roots Reggae', 'Dancehall', 'Dub', 'Ska', 'Rocksteady',
      'Ragga', 'Lovers Rock', 'Digital Reggae', 'Reggaeton',
      'Dubstep Reggae', 'Reggae Fusion', 'One Drop', 'Steppers'
    ]
  },
  'Metal': {
    icon: '‚ö°',
    color: '#34495e',
    subgenres: [
      'Heavy Metal', 'Thrash Metal', 'Death Metal', 'Black Metal',
      'Power Metal', 'Progressive Metal', 'Doom Metal', 'Speed Metal',
      'Glam Metal', 'Nu Metal', 'Metalcore', 'Deathcore',
      'Folk Metal', 'Symphonic Metal'
    ]
  }
};

// Music genre modal
function showMusicGenreModal() {
  // Create modal overlay
  const modalOverlay = document.createElement('div');
  modalOverlay.id = 'ai-playlist-modal';
  modalOverlay.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    backdrop-filter: blur(5px);
  `;

  // Create modal content
  const modalContent = document.createElement('div');
  modalContent.className = 'modal-content';
  modalContent.style.cssText = `
    background: #1a1a1a;
    border-radius: 20px;
    padding: 40px;
    max-width: 800px;
    width: 95%;
    text-align: center;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
    border: 1px solid #333;
    max-height: 90vh;
    overflow-y: auto;
  `;

  // Title
  const title = document.createElement('h2');
  title.textContent = 'Choose Your Music Family';
  title.style.cssText = `
    color: #fff;
    font-size: 28px;
    margin-bottom: 30px;
    font-weight: bold;
  `;
  
  // Add responsive styles
  const responsiveStyles = document.createElement('style');
  responsiveStyles.textContent = `
    @media (max-width: 768px) {
      #ai-playlist-modal .modal-content {
        padding: 20px;
        margin: 10px;
        width: calc(100% - 20px);
        max-height: 95vh;
      }
      
      #ai-playlist-modal h2 {
        font-size: 24px;
        margin-bottom: 20px;
      }
      
      #view-container {
        width: 100% !important;
        height: 400px !important;
        max-width: 350px;
      }
      
      .family-button {
        width: 80px !important;
        height: 80px !important;
        font-size: 12px !important;
      }
      
      .family-button div:first-child {
        font-size: 24px !important;
        margin-bottom: 5px !important;
      }
      
      .subgenre-button {
        width: 60px !important;
        height: 60px !important;
        font-size: 10px !important;
        padding: 2px !important;
      }
      
      #selected-genres-display {
        padding: 15px !important;
        margin-top: 20px !important;
      }
      
      #selected-genres-display div {
        font-size: 12px !important;
        padding: 6px 12px !important;
        margin: 3px !important;
      }
      
      #selected-genres-display button {
        width: 16px !important;
        height: 16px !important;
        font-size: 10px !important;
        margin-left: 6px !important;
      }
      
      #song-count-container {
        padding: 15px !important;
        margin: 15px 0 !important;
      }
      
      #song-count-container div:first-child {
        font-size: 14px !important;
        margin-bottom: 10px !important;
      }
      
      .song-count-btn {
        width: 40px !important;
        height: 40px !important;
        font-size: 14px !important;
      }
      
      button[style*="padding: 15px 30px"] {
        padding: 12px 24px !important;
        font-size: 14px !important;
      }
    }
    
    @media (max-width: 480px) {
      #ai-playlist-modal .modal-content {
        padding: 15px;
        margin: 5px;
        width: calc(100% - 10px);
      }
      
      #view-container {
        height: 300px !important;
        max-width: 280px;
      }
      
      .family-button {
        width: 60px !important;
        height: 60px !important;
        font-size: 10px !important;
      }
      
      .family-button div:first-child {
        font-size: 20px !important;
      }
      
      .subgenre-button {
        width: 50px !important;
        height: 50px !important;
        font-size: 9px !important;
      }
      
      #selected-genres-display div {
        font-size: 11px !important;
        padding: 4px 8px !important;
      }
      
      #selected-genres-display button {
        width: 14px !important;
        height: 14px !important;
        font-size: 9px !important;
        margin-left: 4px !important;
      }
      
      #song-count-container {
        padding: 12px !important;
        margin: 12px 0 !important;
      }
      
      #song-count-container div:first-child {
        font-size: 13px !important;
        margin-bottom: 8px !important;
      }
      
      .song-count-btn {
        width: 35px !important;
        height: 35px !important;
        font-size: 12px !important;
      }
    }
    
    /* Notification responsive styles */
    @media (max-width: 768px) {
      .success-notification,
      .error-notification {
        top: 10px !important;
        right: 10px !important;
        left: 10px !important;
        max-width: none !important;
        padding: 15px !important;
        font-size: 14px !important;
      }
      
      .success-notification div:first-child,
      .error-notification div:first-child {
        font-size: 20px !important;
        margin-right: 8px !important;
      }
      
      .success-notification div:nth-child(2),
      .error-notification div:nth-child(2) {
        font-size: 16px !important;
      }
    }
    
    @media (max-width: 480px) {
      .success-notification,
      .error-notification {
        padding: 12px !important;
        font-size: 13px !important;
      }
      
      .success-notification div:first-child,
      .error-notification div:first-child {
        font-size: 18px !important;
        margin-right: 6px !important;
      }
      
      .success-notification div:nth-child(2),
      .error-notification div:nth-child(2) {
        font-size: 14px !important;
      }
    }
    
    /* Auth modal responsive styles */
    @media (max-width: 768px) {
      .auth-instructions-modal {
        width: 90% !important;
        max-width: none !important;
        padding: 20px !important;
        margin: 10px !important;
        max-height: 90vh !important;
        overflow-y: auto !important;
      }
      
      .auth-instructions-modal h3 {
        font-size: 20px !important;
        margin-bottom: 15px !important;
      }
      
      .auth-instructions-modal p {
        font-size: 14px !important;
        margin-bottom: 15px !important;
      }
      
      .auth-instructions-modal input,
      .auth-instructions-modal textarea {
        font-size: 14px !important;
        padding: 6px 10px !important;
      }
      
      .auth-instructions-modal button {
        padding: 8px 16px !important;
        font-size: 14px !important;
      }
    }
    
    @media (max-width: 480px) {
      .auth-instructions-modal {
        width: 95% !important;
        padding: 15px !important;
        margin: 5px !important;
      }
      
      .auth-instructions-modal h3 {
        font-size: 18px !important;
        margin-bottom: 12px !important;
      }
      
      .auth-instructions-modal p {
        font-size: 13px !important;
        margin-bottom: 12px !important;
      }
      
      .auth-instructions-modal input,
      .auth-instructions-modal textarea {
        font-size: 13px !important;
        padding: 5px 8px !important;
      }
      
      .auth-instructions-modal button {
        padding: 6px 12px !important;
        font-size: 13px !important;
      }
    }
  `;
  document.head.appendChild(responsiveStyles);

  // Navigation breadcrumb
  const breadcrumb = document.createElement('div');
  breadcrumb.id = 'breadcrumb';
  breadcrumb.style.cssText = `
    color: #999;
    margin-bottom: 20px;
    font-size: 14px;
  `;
  breadcrumb.textContent = 'Main Categories';

  // Container for current view
  const viewContainer = document.createElement('div');
  viewContainer.id = 'view-container';
  viewContainer.style.cssText = `
    position: relative;
    width: 600px;
    height: 600px;
    margin: 0 auto;
    display: flex;
    justify-content: center;
    align-items: center;
  `;

  // Track selected genres and current view
  let selectedGenres = [];
  let currentFamily = null;

  // Function to create family buttons
  function createFamilyButtons() {
    viewContainer.innerHTML = '';
    const families = Object.keys(musicFamilies);
    const angleStep = 360 / families.length;
    
    families.forEach((familyName, index) => {
      const family = musicFamilies[familyName];
      const button = document.createElement('button');
      button.className = 'family-button';
      button.innerHTML = `
        <div style="font-size: 40px; margin-bottom: 10px;">${family.icon}</div>
        <div style="font-size: 16px; font-weight: bold;">${familyName}</div>
      `;
      
      const angle = index * angleStep;
      // Responsive radius based on screen size
      const screenWidth = window.innerWidth;
      const radius = screenWidth <= 480 ? 120 : screenWidth <= 768 ? 150 : 200;
      const x = Math.cos(angle * Math.PI / 180) * radius;
      const y = Math.sin(angle * Math.PI / 180) * radius;
      
      button.style.cssText = `
        position: absolute;
        width: 120px;
        height: 120px;
        border-radius: 50%;
        border: 3px solid ${family.color};
        background: linear-gradient(135deg, ${family.color}20, ${family.color}40);
        color: #fff;
        cursor: pointer;
        transition: all 0.3s ease;
        transform: translate(${x}px, ${y}px);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
      `;

      button.addEventListener('mouseenter', () => {
        button.style.transform = `translate(${x}px, ${y}px) scale(1.1)`;
        button.style.boxShadow = `0 8px 25px ${family.color}50`;
      });

      button.addEventListener('mouseleave', () => {
        button.style.transform = `translate(${x}px, ${y}px) scale(1)`;
        button.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.3)';
      });

      button.addEventListener('click', () => {
        showSubgenres(familyName);
      });

      viewContainer.appendChild(button);
    });

    // Center AI icon
    const centerCircle = document.createElement('div');
    centerCircle.style.cssText = `
      position: absolute;
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: linear-gradient(135deg, #667eea, #764ba2);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 40px;
      color: white;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
      z-index: 10;
    `;
    centerCircle.innerHTML = 'ü§ñ';
    viewContainer.appendChild(centerCircle);
  }

  // Function to show subgenres
  function showSubgenres(familyName) {
    currentFamily = familyName;
    const family = musicFamilies[familyName];
    viewContainer.innerHTML = '';
    
    // Update breadcrumb
    breadcrumb.innerHTML = `Main Categories > <span style="color: ${family.color}">${familyName}</span>`;
    
    // Back button
    const backButton = document.createElement('button');
    backButton.innerHTML = '‚Üê Back';
    backButton.style.cssText = `
      position: absolute;
      top: 20px;
      left: 20px;
      background: #333;
      color: #fff;
      border: none;
      padding: 10px 20px;
      border-radius: 20px;
      cursor: pointer;
      font-size: 14px;
      z-index: 20;
    `;
    backButton.addEventListener('click', () => {
      currentFamily = null;
      breadcrumb.textContent = 'Main Categories';
      createFamilyButtons();
    });
    viewContainer.appendChild(backButton);

    // Create subgenre buttons
    const subgenres = family.subgenres;
    const angleStep = 360 / subgenres.length;
    
    subgenres.forEach((subgenre, index) => {
      const button = document.createElement('button');
      button.className = 'subgenre-button';
      button.innerHTML = `
        <div style="font-size: 14px; font-weight: bold;">${subgenre}</div>
      `;
      
      const angle = index * angleStep;
      // Responsive radius for subgenres
      const screenWidth = window.innerWidth;
      const radius = screenWidth <= 480 ? 100 : screenWidth <= 768 ? 130 : 180;
      const x = Math.cos(angle * Math.PI / 180) * radius;
      const y = Math.sin(angle * Math.PI / 180) * radius;
      
      button.style.cssText = `
        position: absolute;
        width: 80px;
        height: 80px;
        border-radius: 50%;
        border: 2px solid ${family.color};
        background: linear-gradient(135deg, ${family.color}20, ${family.color}40);
        color: #fff;
        cursor: pointer;
        transition: all 0.3s ease;
        transform: translate(${x}px, ${y}px);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        font-size: 12px;
        text-align: center;
        padding: 5px;
      `;

      button.addEventListener('mouseenter', () => {
        button.style.transform = `translate(${x}px, ${y}px) scale(1.1)`;
        button.style.boxShadow = `0 8px 25px ${family.color}50`;
      });

      button.addEventListener('mouseleave', () => {
        button.style.transform = `translate(${x}px, ${y}px) scale(1)`;
        button.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.3)';
      });

      button.addEventListener('click', () => {
        // Toggle selection
        const isSelected = selectedGenres.includes(subgenre);
        
        if (isSelected) {
          // Remove from selection
          selectedGenres = selectedGenres.filter(g => g !== subgenre);
          button.style.background = `linear-gradient(135deg, ${family.color}20, ${family.color}40)`;
          button.style.border = `2px solid ${family.color}`;
          button.style.transform = `translate(${x}px, ${y}px) scale(1)`;
        } else {
          // Add to selection
          selectedGenres.push(subgenre);
          button.style.background = `linear-gradient(135deg, ${family.color}, ${family.color}cc)`;
          button.style.border = `2px solid #fff`;
          button.style.transform = `translate(${x}px, ${y}px) scale(1.05)`;
        }
        
        console.log(`Selected genres: ${selectedGenres.join(', ')}`);
        updateSelectedDisplay();
      });

      viewContainer.appendChild(button);
    });

    // Center family icon
    const centerCircle = document.createElement('div');
    centerCircle.style.cssText = `
      position: absolute;
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: linear-gradient(135deg, ${family.color}, ${family.color}cc);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 40px;
      color: white;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
      z-index: 10;
    `;
    centerCircle.innerHTML = family.icon;
    viewContainer.appendChild(centerCircle);
  }

  // Initialize with family buttons
  createFamilyButtons();

  // Selected genres display
  const selectedDisplay = document.createElement('div');
  selectedDisplay.id = 'selected-genres-display';
  selectedDisplay.style.cssText = `
    margin-top: 30px;
    padding: 20px;
    background: #2a2a2a;
    border-radius: 15px;
    border: 1px solid #444;
    min-height: 60px;
  `;

  // Song count logic
  let selectedSongCount = 5; // Default song count
  
  // Create song count selector
  const songCountContainer = document.createElement('div');
  songCountContainer.id = 'song-count-container';
  songCountContainer.style.cssText = `
    margin: 20px 0;
    padding: 20px;
    background: #2a2a2a;
    border-radius: 15px;
    border: 1px solid #444;
    text-align: center;
  `;
  
  const songCountLabel = document.createElement('div');
  songCountLabel.textContent = 'Number of Songs';
  songCountLabel.style.cssText = `
    color: #fff;
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 15px;
  `;
  
  const songCountSelector = document.createElement('div');
  songCountSelector.style.cssText = `
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
  `;
  
  // Create song count options
  const songCounts = [3, 5, 8, 10, 15, 20];
  songCounts.forEach(count => {
    const button = document.createElement('button');
    button.textContent = count.toString();
    button.className = 'song-count-btn';
    button.style.cssText = `
      width: 50px;
      height: 50px;
      border-radius: 50%;
      border: 2px solid #1db954;
      background: ${count === 5 ? 'linear-gradient(135deg, #1db954, #1ed760)' : 'transparent'};
      color: ${count === 5 ? 'white' : '#1db954'};
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    `;
    
    button.addEventListener('click', () => {
      // Remove selection from all buttons
      songCountSelector.querySelectorAll('.song-count-btn').forEach(btn => {
        btn.style.background = 'transparent';
        btn.style.color = '#1db954';
      });
      
      // Select current button
      button.style.background = 'linear-gradient(135deg, #1db954, #1ed760)';
      button.style.color = 'white';
      
      selectedSongCount = count;
      console.log(`Selected song count: ${selectedSongCount}`);
    });
    
    button.addEventListener('mouseenter', () => {
      if (button.style.background === 'transparent') {
        button.style.background = '#1db95420';
        button.style.color = '#1db954';
      }
    });
    
    button.addEventListener('mouseleave', () => {
      if (button.style.background.includes('20')) {
        button.style.background = 'transparent';
        button.style.color = '#1db954';
      }
    });
    
    songCountSelector.appendChild(button);
  });
  
  songCountContainer.appendChild(songCountLabel);
  songCountContainer.appendChild(songCountSelector);

  // Create button
  const createButton = document.createElement('button');
  createButton.textContent = 'Create AI Playlist';
  createButton.style.cssText = `
    background: linear-gradient(135deg, #1db954, #1ed760);
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 25px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    margin-top: 20px;
    transition: all 0.3s ease;
    opacity: 0.5;
    pointer-events: none;
  `;

  createButton.addEventListener('mouseenter', () => {
    if (selectedGenres.length > 0) {
      createButton.style.transform = 'scale(1.05)';
      createButton.style.boxShadow = '0 8px 25px rgba(29, 185, 84, 0.4)';
    }
  });

  createButton.addEventListener('mouseleave', () => {
    createButton.style.transform = 'scale(1)';
    createButton.style.boxShadow = 'none';
  });

  createButton.addEventListener('click', async () => {
    if (selectedGenres.length > 0) {
      console.log(`Creating playlist with genres: ${selectedGenres.join(', ')}`);
      
      // Afficher un loader avec animation
      createButton.textContent = 'ü§ñ G√©n√©ration IA...';
      createButton.disabled = true;
      createButton.style.opacity = '0.7';
      
      // Ajouter une animation de pulsation
      createButton.style.animation = 'pulse 1.5s infinite';
      const pulseStyle = document.createElement('style');
      pulseStyle.textContent = `
        @keyframes pulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.05); }
          100% { transform: scale(1); }
        }
      `;
      document.head.appendChild(pulseStyle);
      
      try {
        // Appel au serveur AI pour g√©n√©rer la playlist
        console.log('Sending request to generate playlist with genres:', selectedGenres, 'and song count:', selectedSongCount);
        const response = await fetch('https://gemini.niperiusland.fr:4005/generate-playlist', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            selectedGenres: selectedGenres,
            songCount: selectedSongCount
          }),
          mode: 'cors',
          credentials: 'omit'
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.error('Server error:', errorText);
          throw new Error(`Erreur serveur: ${response.status} - ${errorText}`);
        }

        const playlistData = await response.json();
        console.log('Playlist g√©n√©r√©e:', playlistData);
        console.log('Playlist structure:', JSON.stringify(playlistData, null, 2));
        
        // V√©rifier que la r√©ponse contient les donn√©es attendues
        if (!playlistData || !playlistData.playlist) {
          console.error('Invalid playlist data structure:', playlistData);
          throw new Error('Format de r√©ponse invalide du serveur');
        }
        
        // S'assurer que la structure de donn√©es est correcte pour Spotify
        const spotifyPlaylistData = {
          name: playlistData.playlist.name || 'AI Generated Playlist',
          description: playlistData.playlist.description || 'Generated by AI',
          songs: (playlistData.playlist.songs || []).map(song => ({
            title: song.title,
            artist: song.artist
          }))
        };
        
        console.log('Formatted for Spotify:', spotifyPlaylistData);
        
        // Afficher les r√©sultats
        showPlaylistResults(playlistData);
        
      } catch (error) {
        console.error('Erreur lors de la g√©n√©ration:', error);
        if (error.message.includes('Failed to fetch')) {
          alert('Erreur de connexion au serveur. V√©rifiez que le serveur est d√©marr√© sur https://gemini.niperiusland.fr:4005');
        } else {
          alert(`Erreur lors de la g√©n√©ration de la playlist: ${error.message}`);
        }
      } finally {
        // Restaurer le bouton
        createButton.textContent = 'Create AI Playlist';
        createButton.disabled = false;
        createButton.style.opacity = '1';
        createButton.style.animation = 'none';
      }
    } else {
      alert('Veuillez s√©lectionner au moins un style musical pour cr√©er une playlist.');
    }
  });


  // Function to update the visual state of a subgenre button when removed
  function updateSubgenreButtonVisualState(genreToRemove) {
    // Only update if we're currently viewing subgenres (not the main family view)
    if (!currentFamily) {
      return; // We're on the main family view, no subgenre buttons to update
    }
    
    // Find the subgenre button in the current view
    const subgenreButtons = viewContainer.querySelectorAll('.subgenre-button');
    subgenreButtons.forEach(button => {
      const buttonText = button.textContent.trim();
      if (buttonText === genreToRemove) {
        // Reset the button to unselected state
        const isSelected = selectedGenres.includes(genreToRemove);
        
        if (!isSelected) {
          // Find the family data for this genre
          let familyData = null;
          for (const [family, data] of Object.entries(musicFamilies)) {
            if (data.subgenres.includes(genreToRemove)) {
              familyData = data;
              break;
            }
          }
          
          if (familyData) {
            // Reset to unselected state
            button.style.background = `linear-gradient(135deg, ${familyData.color}20, ${familyData.color}40)`;
            button.style.border = `2px solid ${familyData.color}`;
            button.style.transform = button.style.transform.replace('scale(1.05)', 'scale(1)');
          }
        }
      }
    });
  }

  // Function to update selected display
  function updateSelectedDisplay() {
    if (selectedGenres.length === 0) {
      selectedDisplay.innerHTML = `
        <div style="color: #999; text-align: center; font-style: italic;">
          Select one or more music styles to create your AI playlist
        </div>
      `;
      createButton.style.opacity = '0.5';
      createButton.style.pointerEvents = 'none';
    } else {
      const genreElements = selectedGenres.map(genre => {
        // Find which family this genre belongs to
        let familyData = null;
        let familyName = '';
        
        for (const [family, data] of Object.entries(musicFamilies)) {
          if (data.subgenres.includes(genre)) {
            familyData = data;
            familyName = family;
            break;
          }
        }
        
        if (familyData) {
          return `
            <div style="
              display: inline-flex;
              align-items: center;
              background: ${familyData.color}20;
              color: ${familyData.color};
              padding: 8px 15px;
              margin: 5px;
              border-radius: 20px;
              border: 1px solid ${familyData.color};
              font-size: 14px;
              font-weight: bold;
              position: relative;
            ">
              <span>${familyData.icon} ${genre}</span>
              <button class="remove-genre-btn" data-genre="${genre}" style="
                background: #e74c3c;
                color: white;
                border: none;
                border-radius: 50%;
                width: 20px;
                height: 20px;
                margin-left: 8px;
                cursor: pointer;
                font-size: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s ease;
              " onmouseover="this.style.background='#c0392b'" onmouseout="this.style.background='#e74c3c'">√ó</button>
            </div>
          `;
        } else {
          // Fallback for unknown genres
          return `
            <div style="
              display: inline-flex;
              align-items: center;
              background: #66620;
              color: #666;
              padding: 8px 15px;
              margin: 5px;
              border-radius: 20px;
              border: 1px solid #666;
              font-size: 14px;
              font-weight: bold;
              position: relative;
            ">
              <span>üéµ ${genre}</span>
              <button class="remove-genre-btn" data-genre="${genre}" style="
                background: #e74c3c;
                color: white;
                border: none;
                border-radius: 50%;
                width: 20px;
                height: 20px;
                margin-left: 8px;
                cursor: pointer;
                font-size: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s ease;
              " onmouseover="this.style.background='#c0392b'" onmouseout="this.style.background='#e74c3c'">√ó</button>
            </div>
          `;
        }
      }).join('');
      
      selectedDisplay.innerHTML = `
        <div style="color: #fff; margin-bottom: 10px; font-weight: bold;">
          Selected Styles (${selectedGenres.length}):
        </div>
        <div>${genreElements}</div>
      `;
      
      // Add event listeners to remove buttons
      selectedDisplay.querySelectorAll('.remove-genre-btn').forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          const genreToRemove = button.getAttribute('data-genre');
          console.log(`Removing genre: ${genreToRemove}`);
          selectedGenres = selectedGenres.filter(genre => genre !== genreToRemove);
          console.log(`Updated selected genres: ${selectedGenres.join(', ')}`);
          
          // Update the visual state of the subgenre button in the circle
          updateSubgenreButtonVisualState(genreToRemove);
          
          updateSelectedDisplay();
        });
      });
      
      createButton.style.opacity = '1';
      createButton.style.pointerEvents = 'auto';
    }
  }

  // Function to show playlist results
  function showPlaylistResults(playlistData) {
    // Fermer toutes les modals existantes
    const existingModal = document.getElementById('ai-playlist-modal');
    const existingResultsModal = document.getElementById('playlist-results-modal');
    
    if (existingModal) {
      existingModal.remove();
    }
    if (existingResultsModal) {
      existingResultsModal.remove();
    }
    
    // Cr√©er une nouvelle modal pour les r√©sultats
    const resultsModal = document.createElement('div');
    resultsModal.id = 'playlist-results-modal';
    resultsModal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.9);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 10001;
      backdrop-filter: blur(5px);
    `;

    const resultsContent = document.createElement('div');
    resultsContent.className = 'results-modal-content';
    resultsContent.style.cssText = `
      background: #1a1a1a;
      border-radius: 20px;
      padding: 40px;
      max-width: 800px;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
      text-align: center;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
      border: 1px solid #333;
    `;

    // Add responsive styles for results modal
    const resultsResponsiveStyles = document.createElement('style');
    resultsResponsiveStyles.textContent = `
      @media (max-width: 768px) {
        .results-modal-content {
          padding: 20px !important;
          margin: 10px !important;
          width: calc(100% - 20px) !important;
          max-height: 90vh !important;
        }
        
        .results-modal-content h2 {
          font-size: 24px !important;
          margin-bottom: 15px !important;
        }
        
        .results-modal-content p {
          font-size: 14px !important;
          margin-bottom: 20px !important;
        }
        
        .song-item {
          padding: 12px !important;
          margin-bottom: 8px !important;
        }
        
        .song-item div:first-child {
          font-size: 16px !important;
        }
        
        .song-item div:nth-child(2) {
          font-size: 14px !important;
        }
        
        .song-item div:nth-child(3) {
          font-size: 12px !important;
        }
        
        .action-buttons {
          flex-direction: column !important;
          gap: 10px !important;
        }
        
        .action-buttons button {
          width: 100% !important;
          padding: 10px 20px !important;
          font-size: 14px !important;
        }
      }
      
      @media (max-width: 480px) {
        .results-modal-content {
          padding: 15px !important;
          margin: 5px !important;
          width: calc(100% - 10px) !important;
        }
        
        .results-modal-content h2 {
          font-size: 20px !important;
        }
        
        .song-item {
          padding: 10px !important;
        }
        
        .song-item div:first-child {
          font-size: 14px !important;
        }
        
        .song-item div:nth-child(2) {
          font-size: 12px !important;
        }
        
        .song-item div:nth-child(3) {
          font-size: 11px !important;
        }
      }
    `;
    document.head.appendChild(resultsResponsiveStyles);

    // Titre de la playlist
    const playlistTitle = document.createElement('h2');
    playlistTitle.textContent = playlistData.playlist.name;
    playlistTitle.style.cssText = `
      color: #1db954;
      font-size: 28px;
      margin-bottom: 15px;
      font-weight: bold;
    `;

    // Description
    const playlistDesc = document.createElement('p');
    playlistDesc.textContent = playlistData.playlist.description;
    playlistDesc.style.cssText = `
      color: #fff;
      font-size: 16px;
      margin-bottom: 30px;
      opacity: 0.8;
    `;

    // Liste des chansons
    const songsList = document.createElement('div');
    songsList.style.cssText = `
      text-align: left;
      margin-bottom: 30px;
    `;

    playlistData.playlist.songs.forEach((song, index) => {
      const songItem = document.createElement('div');
      songItem.className = 'song-item';
      songItem.style.cssText = `
        background: #2a2a2a;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
        border-left: 4px solid #1db954;
        transition: all 0.3s ease;
      `;

      songItem.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <div>
            <div style="color: #fff; font-size: 18px; font-weight: bold; margin-bottom: 5px;">
              ${song.title}
            </div>
            <div style="color: #1db954; font-size: 16px; margin-bottom: 5px;">
              ${song.artist} (${song.year})
            </div>
            <div style="color: #999; font-size: 14px;">
              ${song.genre} ‚Ä¢ ${song.description}
            </div>
          </div>
          <div style="color: #666; font-size: 14px;">
            #${index + 1}
          </div>
        </div>
      `;

      songItem.addEventListener('mouseenter', () => {
        songItem.style.background = '#333';
        songItem.style.transform = 'translateX(5px)';
      });

      songItem.addEventListener('mouseleave', () => {
        songItem.style.background = '#2a2a2a';
        songItem.style.transform = 'translateX(0)';
      });

      songsList.appendChild(songItem);
    });

    // Boutons d'action
    const actionButtons = document.createElement('div');
    actionButtons.className = 'action-buttons';
    actionButtons.style.cssText = `
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 30px;
    `;

    const closeButton = document.createElement('button');
    closeButton.textContent = 'Fermer';
    closeButton.style.cssText = `
      background: #666;
      color: white;
      border: none;
      padding: 12px 30px;
      border-radius: 25px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      transition: all 0.3s ease;
    `;

    const copyButton = document.createElement('button');
    copyButton.textContent = 'Copier JSON';
    copyButton.style.cssText = `
      background: #666;
      color: white;
      border: none;
      padding: 12px 30px;
      border-radius: 25px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      transition: all 0.3s ease;
    `;

    const spotifyButton = document.createElement('button');
    spotifyButton.textContent = 'Cr√©er sur Spotify';
    spotifyButton.style.cssText = `
      background: linear-gradient(135deg, #1db954, #1ed760);
      color: white;
      border: none;
      padding: 12px 30px;
      border-radius: 25px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      transition: all 0.3s ease;
    `;

    closeButton.addEventListener('click', () => {
      const modal = document.getElementById('playlist-results-modal');
      if (modal && modal.parentNode) {
        modal.parentNode.removeChild(modal);
      }
    });

    copyButton.addEventListener('click', () => {
      navigator.clipboard.writeText(JSON.stringify(playlistData, null, 2))
        .then(() => {
          copyButton.textContent = 'Copi√©!';
          setTimeout(() => {
            copyButton.textContent = 'Copier JSON';
          }, 2000);
        })
        .catch(err => {
          console.error('Erreur lors de la copie:', err);
          alert('Erreur lors de la copie');
        });
    });

    console.log('üéµ Spotify button created and event listener added');
    
    spotifyButton.addEventListener('click', async () => {
      console.log('üéµ ===== SPOTIFY BUTTON CLICKED =====');
      console.log('üéµ Current playlistData:', playlistData);
      try {
        spotifyButton.textContent = 'üîê Connexion Spotify...';
        spotifyButton.disabled = true;
        spotifyButton.style.opacity = '0.7';
        
        console.log('üîê Step 1: Getting auth URL...');
        // Obtenir l'URL d'authentification
        const authResponse = await fetch('https://gemini.niperiusland.fr:4005/spotify-auth');
        console.log('üîê Auth response status:', authResponse.status);
        const { authUrl } = await authResponse.json();
        console.log('üîê Auth URL received:', authUrl);
        
        // Use a simple approach - show the auth URL to the user
        console.log('üîê Step 2: Showing auth instructions...');
        console.log('üîê Auth URL:', authUrl);
        
        // Store the current playlist data in sessionStorage
        sessionStorage.setItem('pendingPlaylistData', JSON.stringify(playlistData));
        sessionStorage.setItem('authInProgress', 'true');
        
        // Show instructions to the user
        const authInstructions = document.createElement('div');
        authInstructions.id = 'auth-instructions';
        authInstructions.className = 'auth-instructions-modal';
        authInstructions.style.cssText = `
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: #1a1a1a;
          color: white;
          padding: 30px;
          border-radius: 15px;
          box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
          border: 1px solid #333;
          z-index: 10003;
          max-width: 500px;
          text-align: center;
        `;
        
        authInstructions.innerHTML = `
          <h3 style="margin-bottom: 20px; color: #1db954;">üéµ Create Spotify Playlist</h3>
          <p style="margin-bottom: 20px;">Ready to create your AI-generated playlist on Spotify!</p>
          
          <div style="background: #2a2a2a; padding: 15px; border-radius: 10px; margin-bottom: 20px; font-size: 14px;">
            <p style="margin-bottom: 10px; color: #1db954; font-weight: bold;">üìù Playlist Details:</p>
            <div style="margin-bottom: 15px;">
              <label style="display: block; margin-bottom: 5px; color: #ccc;">Playlist Name:</label>
              <input type="text" id="playlist-name-input" value="${playlistData.playlist.name}" style="
                width: 100%;
                padding: 8px 12px;
                border: 1px solid #555;
                border-radius: 5px;
                background: #333;
                color: white;
                font-size: 14px;
              " />
            </div>
            <div style="margin-bottom: 15px;">
              <label style="display: block; margin-bottom: 5px; color: #ccc;">Description:</label>
              <textarea id="playlist-desc-input" style="
                width: 100%;
                padding: 8px 12px;
                border: 1px solid #555;
                border-radius: 5px;
                background: #333;
                color: white;
                font-size: 14px;
                height: 60px;
                resize: vertical;
              ">${playlistData.playlist.description}</textarea>
            </div>
          </div>
          
          <div style="background: #2a2a2a; padding: 15px; border-radius: 10px; margin-bottom: 20px; font-size: 14px;">
            <p style="margin-bottom: 10px; color: #1db954; font-weight: bold;">üìã What will happen:</p>
            <ul style="margin: 0; padding-left: 20px; color: #ccc;">
              <li>Your playlist will be created on Spotify</li>
              <li>All the AI-generated songs will be added</li>
              <li>You'll get a link to open the playlist</li>
              <li>Modal will close automatically after creation</li>
            </ul>
          </div>
          <div style="display: flex; gap: 10px; justify-content: center;">
            <button id="auth-complete-btn" style="
              background: #1db954;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 20px;
              cursor: pointer;
              font-weight: bold;
            ">Create Playlist</button>
            <button id="auth-cancel-btn" style="
              background: #666;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 20px;
              cursor: pointer;
              font-weight: bold;
            ">Cancel</button>
          </div>
        `;
        
        document.body.appendChild(authInstructions);
        
        // Handle auth completion
        document.getElementById('auth-complete-btn').addEventListener('click', async () => {
          console.log('üîê Starting Spotify authentication flow...');
          
          // Get the modified playlist name and description
          const playlistName = document.getElementById('playlist-name-input').value.trim() || playlistData.playlist.name;
          const playlistDescription = document.getElementById('playlist-desc-input').value.trim() || playlistData.playlist.description;
          
          console.log('üìù Using modified playlist details:', { playlistName, playlistDescription });
          
          try {
            // Step 1: Get auth URL from server
            console.log('üîê Step 1: Getting auth URL from server...');
            const authResponse = await fetch('https://gemini.niperiusland.fr:4005/spotify-auth');
            if (!authResponse.ok) {
              throw new Error('Failed to get auth URL');
            }
            const { authUrl } = await authResponse.json();
            console.log('üîê Auth URL received:', authUrl);
            
            // Step 2: Open auth window
            console.log('üîê Step 2: Opening auth window...');
            const authWindow = window.open(authUrl, 'spotify-auth', 'width=500,height=600,scrollbars=yes,resizable=yes');
            
            // Step 3: Listen for messages from the popup window
            const messageHandler = (event) => {
              console.log('üì® Message from popup:', event.data);
              
              if (event.data && event.data.success && event.data.accessToken) {
                console.log('‚úÖ Received tokens from popup');
                window.removeEventListener('message', messageHandler);
                
                const { accessToken, refreshToken } = event.data;
                
                // Remove instructions
                document.getElementById('auth-instructions').remove();
                
                // Create modified playlist data with user's changes
                const modifiedPlaylistData = {
                  ...playlistData,
                  playlist: {
                    ...playlistData.playlist,
                    name: playlistName,
                    description: playlistDescription
                  }
                };
                
                // Create playlist with fresh token
                createSpotifyPlaylist(accessToken, modifiedPlaylistData, refreshToken);
                
                // Clean up
                sessionStorage.removeItem('authInProgress');
                sessionStorage.removeItem('pendingPlaylistData');
                
                // Close the popup
                if (authWindow && !authWindow.closed) {
                  authWindow.close();
                }
              } else if (event.data && event.data.success === false) {
                console.log('‚ùå Auth failed:', event.data.error);
                window.removeEventListener('message', messageHandler);
                alert('Authentication failed: ' + event.data.error);
                if (authWindow && !authWindow.closed) {
                  authWindow.close();
                }
              }
            };
            
            window.addEventListener('message', messageHandler);
            
            // Timeout after 5 minutes
            setTimeout(() => {
              window.removeEventListener('message', messageHandler);
              if (!authWindow.closed) {
                authWindow.close();
                alert('Authentication timed out. Please try again.');
              }
            }, 300000);
            
          } catch (error) {
            console.error('‚ùå Auth flow error:', error);
            alert('Authentication failed: ' + error.message);
          }
        });
        
        // Handle cancel
        document.getElementById('auth-cancel-btn').addEventListener('click', () => {
          console.log('üîê Auth cancelled');
          document.getElementById('auth-instructions').remove();
          sessionStorage.removeItem('authInProgress');
          sessionStorage.removeItem('pendingPlaylistData');
        });
        
      } catch (error) {
        console.error('‚ùå ===== SPOTIFY CREATION ERROR =====');
        console.error('‚ùå Error type:', error.constructor.name);
        console.error('‚ùå Error message:', error.message);
        console.error('‚ùå Error stack:', error.stack);
        console.error('‚ùå Full error object:', error);
        
        // Notification d'erreur plus belle
        const errorNotification = document.createElement('div');
        errorNotification.className = 'error-notification';
        errorNotification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: linear-gradient(135deg, #e74c3c, #c0392b);
          color: white;
          padding: 20px;
          border-radius: 15px;
          box-shadow: 0 10px 30px rgba(231, 76, 60, 0.3);
          z-index: 10002;
          max-width: 400px;
          animation: slideIn 0.3s ease;
        `;
        
        errorNotification.innerHTML = `
          <div style="display: flex; align-items: center; margin-bottom: 10px;">
            <div style="font-size: 24px; margin-right: 10px;">‚ùå</div>
            <div style="font-weight: bold; font-size: 18px;">Erreur</div>
          </div>
          <div style="margin-bottom: 15px;">
            ${error.message}
          </div>
          <button onclick="this.parentElement.remove()" style="
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
          ">Fermer</button>
        `;
        
        document.body.appendChild(errorNotification);
        
        spotifyButton.textContent = 'Cr√©er sur Spotify';
        spotifyButton.disabled = false;
        spotifyButton.style.opacity = '1';
      }
    });

    // Assemble results modal
    resultsContent.appendChild(playlistTitle);
    resultsContent.appendChild(playlistDesc);
    resultsContent.appendChild(songsList);
    actionButtons.appendChild(closeButton);
    actionButtons.appendChild(copyButton);
    actionButtons.appendChild(spotifyButton);
    resultsContent.appendChild(actionButtons);
    resultsModal.appendChild(resultsContent);
    document.body.appendChild(resultsModal);
    
    console.log('üéµ Results modal created and added to DOM');
    console.log('üéµ Spotify button element:', spotifyButton);
    console.log('üéµ Button text:', spotifyButton.textContent);
  }

  // Initialize display
  updateSelectedDisplay();

  // Close button
  const closeButton = document.createElement('button');
  closeButton.innerHTML = '‚úï';
  closeButton.style.cssText = `
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    color: #999;
    font-size: 24px;
    cursor: pointer;
    padding: 5px;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  `;

  closeButton.addEventListener('mouseenter', () => {
    closeButton.style.background = '#333';
    closeButton.style.color = '#fff';
  });

  closeButton.addEventListener('mouseleave', () => {
    closeButton.style.background = 'none';
    closeButton.style.color = '#999';
  });

  closeButton.addEventListener('click', closeModal);

  // Close modal function
  function closeModal() {
    const modal = document.getElementById('ai-playlist-modal');
    if (modal && modal.parentNode) {
      modal.parentNode.removeChild(modal);
    }
  }

  // Close on overlay click
  modalOverlay.addEventListener('click', (e) => {
    if (e.target === modalOverlay) {
      closeModal();
    }
  });

  // Escape key to close
  const handleEscape = (e) => {
    if (e.key === 'Escape') {
      closeModal();
      document.removeEventListener('keydown', handleEscape);
    }
  };
  document.addEventListener('keydown', handleEscape);

  // Assemble modal
  modalContent.appendChild(closeButton);
  modalContent.appendChild(title);
  modalContent.appendChild(breadcrumb);
  modalContent.appendChild(viewContainer);
  modalContent.appendChild(selectedDisplay);
  modalContent.appendChild(songCountContainer);
  modalContent.appendChild(createButton);
  modalOverlay.appendChild(modalContent);
  document.body.appendChild(modalOverlay);
}

// Start the injection when the page loads
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', addAIPlaylistButton);
} else {
  addAIPlaylistButton();
}